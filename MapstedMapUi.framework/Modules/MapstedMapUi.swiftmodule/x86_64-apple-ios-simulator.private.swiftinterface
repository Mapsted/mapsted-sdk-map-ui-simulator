// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MapstedMapUi
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AudioToolbox
import Combine
import CoreBluetooth
import CoreData
import CoreLocation
import CoreMotion
import DeveloperToolsSupport
import Foundation
import ImageIO
import LocationMarketing
@_spi(InternalMapstedAlerts) import MapstedAlerts
import MapstedComponentsUI
@_spi(InternalAssistedPositioning) @_spi(InternalCategories) @_spi(InternalImages) @_spi(InternalLocationServices) @_spi(InternalPropertyServices) @_spi(InternalUtilities) import MapstedCore
import MapstedLocationShare
import MapstedMap
import MapstedTopBarNotification
import MapstedTriggersCore
import MessageUI
import Network
import SDWebImage
import SafariServices
import Speech
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_Concurrency.MainActor @preconcurrency open class BottomPopupNavigationController : UIKit.UINavigationController, MapstedMapUi.BottomPopupAttributesDelegate {
  @_Concurrency.MainActor @preconcurrency weak open var popupDelegate: (any MapstedMapUi.BottomPopupDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open var popupHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupTopCornerRadius: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupPresentDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupDismissDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupShouldDismissInteractivelty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupDimmingViewAlpha: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupShouldBeganDismiss: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupViewAccessibilityIdentifier: Swift.String {
    get
  }
  @objc deinit
}
extension MapstedMapUi.BottomPopupNavigationController {
  @_Concurrency.MainActor @preconcurrency open func updatePopupHeight(to height: CoreFoundation.CGFloat)
}
public enum ModelType {
  case Property
  case Building
  case POI
  case Tag
  case NewsAndEvents
  case Promotions
  case MapOverlay
  public static func == (a: MapstedMapUi.ModelType, b: MapstedMapUi.ModelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MapSelectableEntity {
  var supportsFavorites: Swift.Bool { get }
  func isFavorite() -> Swift.Bool
  func addToFavorites()
  func removeFromFavorites()
  var socialLinks: [MapstedCore.SocialMedium : Swift.String] { get }
  var phoneNumber: Swift.String? { get }
  var website: Swift.String? { get }
  func tags() -> [Swift.String]
  func allCampaigns() -> [MapstedCore.Campaign]
  var entityNameEnglish: Swift.String { get }
  var entityName: Swift.String { get }
  var categoryName: Swift.String { get }
  var subcategoryNames: [Swift.String] { get }
  var logoImage: UIKit.UIImage? { get }
  var logoImageUid: Swift.String { get }
  var logoImageBaseUrl: Swift.String { get }
  var timeHint: MapstedCore.DailyBusinessHours? { get }
  var coverImage: UIKit.UIImage? { get }
  var coverImages: [Swift.String] { get }
  var entityPropertyId: Swift.Int { get }
  var entityBuildingId: Swift.Int { get }
  var entityIdentifier: Swift.Int { get }
  var entityDescription: Swift.String? { get }
  var dataType: MapstedCore.MNDataType { get }
  var entityZones: [MapstedCore.MNEntityZone] { get }
  var timeDescription: Swift.String { get set }
  var hasCoverImages: Swift.Bool { get }
  var hasAlerts: Swift.Bool { get }
  var address: Swift.String { get }
  var modelDataType: MapstedMapUi.ModelType { get }
  var campaignLabels: [MapstedCore.Labels]? { get }
  var campaignFeatures: [MapstedCore.Features]? { get }
  var postiveButtonTitle: Swift.String? { get }
}
extension MapstedMapUi.MapSelectableEntity {
  public var supportsFavorites: Swift.Bool {
    get
  }
  public func isFavorite() -> Swift.Bool
  public func addToFavorites()
  public func removeFromFavorites()
  public var socialLinks: [MapstedCore.SocialMedium : Swift.String] {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var website: Swift.String? {
    get
  }
  public func tags() -> [Swift.String]
  public func allCampaigns() -> [MapstedCore.Campaign]
  public var coverImage: UIKit.UIImage? {
    get
  }
  public var logoImage: UIKit.UIImage? {
    get
  }
  public var timeDescription: Swift.String {
    get
    set
  }
  public var hasCoverImages: Swift.Bool {
    get
  }
  public var campaignLabels: [MapstedCore.Labels]? {
    get
  }
  public var campaignFeatures: [MapstedCore.Features]? {
    get
  }
  public var postiveButtonTitle: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MyTagListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var propertyId: Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedMapUi.MyTagListViewController : MapstedComponentsUI.CustomNavigationBarDelegate {
  @_Concurrency.MainActor @preconcurrency public func textDidChanged(searchText: Swift.String, inSearch: Swift.Bool, isExitSearch: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func backButtonTapped()
  @_Concurrency.MainActor @preconcurrency public func micButtonTapped()
}
extension MapstedMapUi.MyTagListViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension MapstedMapUi.MyTagListViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension MapstedMapUi.MyTagListViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
extension MapstedMapUi.MyTagListViewController : MapstedMapUi.MapManualLocationChooserDelegate {
  @_Concurrency.MainActor @preconcurrency public var willChooseLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var cancelledChoosingLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var shownUIToChooseLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var didSelectLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var removedUIToChooseLocation: MapstedMapUi.RoutingState {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MapstedMapUiViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static let shared: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public var isTappedOnExploreButton: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func enableFromToLabelsOnRoutePreview(enable: Swift.Bool, fromLabel: Swift.String = "", toLabel: Swift.String = "")
  @_Concurrency.MainActor @preconcurrency public func setViewAppearanceDelegate(delegate: any MapstedMapUi.HandlerForWhenViewDoesAppear)
  @_Concurrency.MainActor @preconcurrency public func refreshViews()
  @_Concurrency.MainActor @preconcurrency public func setMapStateDelegate(mapStateDelegate: any MapstedMapUi.MNMapStateDelegate)
  @_Concurrency.MainActor @preconcurrency public func setFeedDelegate(feedDelegate: any MapstedMapUi.MNFeedDelegate)
  @_Concurrency.MainActor @preconcurrency public func setMarketingDelegate(marketingDelegate: any MapstedCore.LocationMarketingCreativeDelegate)
  @_Concurrency.MainActor @preconcurrency public func setShareLocationDelegate(shareLocationDelegate: any MapstedMapUi.MNShareLocationDelegate)
  @_Concurrency.MainActor @preconcurrency public func setSendFeedbackDelegate(feedDelegate: any MapstedMapUi.MNFeedbackDelegate)
  @_Concurrency.MainActor @preconcurrency public func setSearchDelegate(searchDelegate: any MapstedMapUi.MNSearchDelegate)
  @_Concurrency.MainActor @preconcurrency public func setAlertDelegate(alertDelegate: any MapstedMapUi.MNAlertDelegate)
  @_Concurrency.MainActor @preconcurrency public func setAlertsTableViewDelegate(alertsTableViewDelegate: (any MapstedComponentsUI.AlertsTableViewDelegate)?)
  @_Concurrency.MainActor @preconcurrency public func addCustomViewOnMap(_ customView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func removeCustomViewFromMap(_ customView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func clearAllRouteUi()
  @_Concurrency.MainActor @preconcurrency public func displayPropertyOnMap(propertyId: Swift.Int, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func cleanUpProperty()
  @_Concurrency.MainActor @preconcurrency public func routeTo(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int, showDirections: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func navigateTo(searchEntities: [any MapstedCore.Searchable], fromCurrentLocation: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func clearAllTags()
  @_Concurrency.MainActor @preconcurrency public func deleteAllTags()
  @_Concurrency.MainActor @preconcurrency public func refreshTags(closure: (() -> ())? = nil, plotTags: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func displayPropertyOnMap(completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func displayOnMap(dataType: MapstedCore.MNDataType? = nil, render: Swift.Bool = true, propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int?, floorId: Swift.Int? = -1, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func displayMap(dataType: MapstedCore.MNDataType? = nil, render: Swift.Bool = true, propertyId: Swift.Int, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func createNewTag(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func showTagManager(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func showTagCreationOptions(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func displayOnMap(tag: MapstedCore.MNTag, isFromDeeplink: Swift.Bool? = false, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func displayDroppedPinOnMap(pin: MapstedCore.MNTag, isFromDeeplink: Swift.Bool? = false, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func displayOverlayOnMap(overlayItem: MapstedMap.MapOverlayItem, completed: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency public func viewMapOverlay(item: MapstedMap.MapOverlayItem)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func showLoadingSpinner(text: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func hideLoadingSpinner()
  @_Concurrency.MainActor @preconcurrency public func selectAndDrawProperty(propertyId: Swift.Int, callback: @escaping ((Swift.Bool) -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency public func unloadProperty(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func zoomToUserLocation()
  @_Concurrency.MainActor @preconcurrency public func takeToNearest(fromHomeEntities homeEntities: [MapstedCore.HomeEntity])
  @_Concurrency.MainActor @preconcurrency public func showAlerts(alerts: [MapstedAlerts.AlertSearchable])
  @_Concurrency.MainActor @preconcurrency public func directTo(alert: MapstedAlerts.AlertSearchable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedMapUi.MapstedMapUiViewController : MapstedMapUi.MNBannerDelegate {
  @_Concurrency.MainActor @preconcurrency public func updateBanner()
}
extension MapstedMapUi.MapstedMapUiViewController : MapstedMapUi.MNUnreliableDataBannerDelegate {
  @_Concurrency.MainActor @preconcurrency public func updateUnreliableDataBanner()
}
extension MapstedMapUi.MapstedMapUiViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension MapstedMapUi.MapstedMapUiViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension MapstedMapUi.MapstedMapUiViewController : MapstedLocationShare.ShareLiveLocationListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onShareLiveLocationEnabled(enabled: Swift.Bool)
}
extension MapstedMapUi.MapstedMapUiViewController : MapstedCore.MNDeepLinkDelegate {
  @_Concurrency.MainActor @preconcurrency public func processDeepLink(uri: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func processDeepLink(path: Swift.String, params: [Foundation.URLQueryItem]?, completion: ((Swift.Bool) -> Swift.Void)?)
}
extension MapstedMapUi.MapstedMapUiViewController {
  @_Concurrency.MainActor @preconcurrency public func showEntityChooser(entities: [any MapstedCore.ISearchable], name: Swift.String = "Points of Interest")
}
extension MapstedMapUi.MapstedMapUiViewController : MapstedTopBarNotification.MapstedNotificationListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTopBarNotificationEnabled(enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onTopBarNotificationCountUpdated(count: Swift.Int, height: CoreFoundation.CGFloat, heightMode: MapstedTopBarNotification.HeightMode)
}
extension MapstedMapUi.MapstedMapUiViewController {
  @_Concurrency.MainActor @preconcurrency public func showWebView(websiteUrl: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func showEventDetailForCampaign(campaignId: Swift.String, propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func showEntityOnMapForCampaign(campaignId: Swift.String, propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func selectNearestEntityFromGroup(entityGroup: [any MapstedCore.ISearchable])
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedComponentsUI.EntityChoiceSelectionHandler {
  @_Concurrency.MainActor @preconcurrency final public func selectEntity(searchable: any MapstedCore.Searchable, hostVC: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency final public func selectNearest(group: MapstedCore.SearchEntity, hostVC: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency final public func exitChooser(hostVC: UIKit.UIViewController?)
}
extension MapstedCore.MNTag : MapstedMapUi.MapSelectableEntity {
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var supportsFavorites: Swift.Bool {
    get
  }
  public var entityNameEnglish: Swift.String {
    get
  }
  public var entityName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var logoImage: UIKit.UIImage? {
    get
  }
  public var coverImage: UIKit.UIImage? {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var entityPropertyId: Swift.Int {
    get
  }
  public var entityBuildingId: Swift.Int {
    get
  }
  public var entityIdentifier: Swift.Int {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var dataType: MapstedCore.MNDataType {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var address: Swift.String {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
}
extension MapstedCore.PropertyInfo : MapstedMapUi.MapSelectableEntity {
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var entityNameEnglish: Swift.String {
    get
  }
  public var entityName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var entityPropertyId: Swift.Int {
    get
  }
  public var entityBuildingId: Swift.Int {
    get
  }
  public var entityIdentifier: Swift.Int {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var dataType: MapstedCore.MNDataType {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var address: Swift.String {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var website: Swift.String? {
    get
  }
  public func tags() -> [Swift.String]
}
extension MapstedMapUi.SearchViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func roundCornerWithShadow(cornerRadius: CoreFoundation.CGFloat, shadowRadius: CoreFoundation.CGFloat, offsetX: CoreFoundation.CGFloat, offsetY: CoreFoundation.CGFloat, colour: UIKit.UIColor, opacity: Swift.Float, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func maskByRoundingCorners(_ masks: UIKit.UIRectCorner, withRadii radii: CoreFoundation.CGSize = CGSize(width: 10, height: 10))
}
extension MapstedCore.BuildingInfo : MapstedMapUi.MapSelectableEntity {
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var entityNameEnglish: Swift.String {
    get
  }
  public var entityName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var entityPropertyId: Swift.Int {
    get
  }
  public var entityBuildingId: Swift.Int {
    get
  }
  public var entityIdentifier: Swift.Int {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var dataType: MapstedCore.MNDataType {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var address: Swift.String {
    get
  }
}
extension MapstedMapUi.SearchViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class ShadowButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var radiusOfCorner: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var shadowOpacity: Swift.Float
  @_Concurrency.MainActor @preconcurrency public var fillColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func setFillCover(color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setTintColor(color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedMapUi.SearchViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
public protocol MapstedPermissionsRequestVCDelegate : AnyObject {
  func requestPermissionsDidComplete()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MapstedPermissionsRequestViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var requestPermissions: [MapstedCore.PERMISSION_REQUEST_TYPE]
  @_Concurrency.MainActor @preconcurrency public static func instantiateViewController(requestPermissions: [MapstedCore.PERMISSION_REQUEST_TYPE], delegate: any MapstedMapUi.MapstedPermissionsRequestVCDelegate) -> MapstedMapUi.MapstedPermissionsRequestViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MNAndroidActivityView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @objc deinit
}
public protocol HandlerForWhenViewDoesAppear {
  func performWhenViewAppears()
}
public protocol MapManualLocationChooserDelegate {
  var willChooseLocation: MapstedMapUi.RoutingState { get }
  var cancelledChoosingLocation: MapstedMapUi.RoutingState { get }
  var shownUIToChooseLocation: MapstedMapUi.RoutingState { get }
  var didSelectLocation: MapstedMapUi.RoutingState { get }
  var removedUIToChooseLocation: MapstedMapUi.RoutingState { get }
}
public enum MapState : Swift.Int {
  case eProperty
  case eEntity
  case eDirections
  case eInfo
  case eTag
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MNMapStateDelegate {
  func mapStateChanged(state: MapstedMapUi.MapState)
}
public protocol MNFeedDelegate {
  func allFeed() -> [[Swift.String : Swift.String]]
}
public protocol MNShareLocationDelegate {
  func shareLocationRequest(duration: Swift.Int)
}
public protocol MNFeedbackDelegate {
  func sendFeedback()
}
public protocol MNSearchDelegate {
  func selectCategory(category: MapstedCore.CMSCategory)
  func selectAlert(alert: MapstedAlerts.AlertSearchable)
}
extension MapstedMapUi.MNSearchDelegate {
  public func selectAlert(alert: MapstedAlerts.AlertSearchable)
}
public protocol MNAlertDelegate {
  func showAlerts()
  func loadingAlerts() -> Swift.Bool
}
public protocol MNBannerDelegate {
  func updateBanner()
}
public protocol MNUnreliableDataBannerDelegate {
  func updateUnreliableDataBanner()
}
public enum RoutingRequestType {
  case Navigation
  case Itinerary
  case None
  public static func == (a: MapstedMapUi.RoutingRequestType, b: MapstedMapUi.RoutingRequestType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteInterruptionMode {
  case GiveChoices
  case ClearAndResart
  public static func == (a: MapstedMapUi.RouteInterruptionMode, b: MapstedMapUi.RouteInterruptionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapIcons {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class MapstedMapUiInternalViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency final public var isDisplaying: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var curOverlaysVisibility: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var isFromLocationAccuracy: Swift.Bool
  #warning("Note: Set isSimulatingRoute to false before release")
  @_Concurrency.MainActor @preconcurrency public static let shared: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency final public var alertsTableViewDelegate: (any MapstedComponentsUI.AlertsTableViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public static func className() -> Swift.String
  @_Concurrency.MainActor @preconcurrency final public func setViewAppearanceDelegate(delegate: any MapstedMapUi.HandlerForWhenViewDoesAppear)
  @_Concurrency.MainActor @preconcurrency final public func setMapStateDelegate(mapStateDelegate: any MapstedMapUi.MNMapStateDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setFeedDelegate(feedDelegate: any MapstedMapUi.MNFeedDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setMarketingDelegate(marketingDelegate: any MapstedCore.LocationMarketingCreativeDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setShareLocationDelegate(shareLocationDelegate: any MapstedMapUi.MNShareLocationDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setSendFeedbackDelegate(feedDelegate: any MapstedMapUi.MNFeedbackDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setSearchDelegate(searchDelegate: any MapstedMapUi.MNSearchDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setAlertDelegate(alertDelegate: any MapstedMapUi.MNAlertDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setBannerDelegate(bannerDelegate: any MapstedMapUi.MNBannerDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setUnreliableDataBannerDelegate(unreliableDataBannerDelegate: any MapstedMapUi.MNUnreliableDataBannerDelegate)
  @_Concurrency.MainActor @preconcurrency final public func setAlertsTableViewDelegate(alertsTableViewDelegate: (any MapstedComponentsUI.AlertsTableViewDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency final public func downloadAndRenderProperty(propertyId: Swift.Int, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func cleanUpForNewProperty()
  @_Concurrency.MainActor @preconcurrency final public func updateSelectedPropertyInfo()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor @preconcurrency final public func showLoadingSpinner(text: Swift.String)
  @_Concurrency.MainActor @preconcurrency final public func hideLoadingSpinner()
  @_Concurrency.MainActor @preconcurrency final public func selectAndDrawProperty(propertyId: Swift.Int, callback: @escaping ((Swift.Bool) -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency final public func createNewTag(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency final public func showTagManager(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency final public func showTagCreationOptions(propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency final public func zoomToEntity(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency final public func zoomTo(location: MapstedCore.MNMercator, zoomLevel: Swift.Float)
  @_Concurrency.MainActor @preconcurrency final public func zoomTo(level: Swift.Float)
  @_Concurrency.MainActor @preconcurrency final public func zoomToUserLocation()
  @_Concurrency.MainActor @preconcurrency final public func displayOnMap(tag: MapstedCore.MNTag, isFromDeeplink: Swift.Bool? = false, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func displayDroppedPinOnMap(pin: MapstedCore.MNTag, isFromDeeplink: Swift.Bool? = false, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func displayOnMap(dataType: MapstedCore.MNDataType? = nil, render: Swift.Bool = true, propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int?, floorId: Swift.Int? = -1, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func displayMap(dataType: MapstedCore.MNDataType? = nil, render: Swift.Bool = true, propertyId: Swift.Int, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func connectWifiBluetoothBannerText() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency final public func displayPropertyOnMap(propertyId: Swift.Int, completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func routeTo(buildingId: Swift.Int, propertyId: Swift.Int, entityId: Swift.Int, showDirections: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency final public func clearAllTags()
  @_Concurrency.MainActor @preconcurrency final public func deleteAllTags()
  @_Concurrency.MainActor @preconcurrency final public func refreshTags(closure: (() -> ())? = nil, plotTags: Swift.Bool = true, tagName: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency final public func displayPropertyOnMap()
  @_Concurrency.MainActor @preconcurrency final public func enableFromToLabelsOnRouteOverview(enable: Swift.Bool, fromLabel: Swift.String = "", toLabel: Swift.String = "")
  @_Concurrency.MainActor @preconcurrency final public func moveUp(amount: CoreFoundation.CGFloat, maxHeight: CoreFoundation.CGFloat, actionAtMaximumPoint: (() -> ())?)
  @_Concurrency.MainActor @preconcurrency final public func selectedEntityVisibleHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public func moveDown(amount: CoreFoundation.CGFloat, minHeight: CoreFoundation.CGFloat, actionAtMinimumPoint: (() -> ())?)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension MapstedMapUi.MapstedMapUiInternalViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMap.MapEventListener {
  @_Concurrency.MainActor @preconcurrency final public func onMapEvent(event: MapstedMap.MapEvent)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMap.MapClickListener {
  @_Concurrency.MainActor @preconcurrency final public func onMapClicked(event: MapstedMap.MapClickEvent)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.NearbyPropertiesListener {
  @_Concurrency.MainActor @preconcurrency final public func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  @_Concurrency.MainActor @preconcurrency final public func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.PositionChangeListener {
  @_Concurrency.MainActor @preconcurrency @objc final public func onPositionChange(position: MapstedCore.MNPosition)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.PositionAnimationListener {
  @_Concurrency.MainActor @preconcurrency @objc final public func onPositionAnimation(position: MapstedCore.MNPosition, animationBegins: Swift.Bool)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.PositionVisibilityListener {
  @_Concurrency.MainActor @preconcurrency @objc final public func setPositionVisibility(visible: Swift.Bool)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.ValidBlueDotCallbackListener {
  @_Concurrency.MainActor @preconcurrency @objc final public func onValidBlueDotStateChange(error: MapstedCore.EnumValidBlueDotError)
  @_Concurrency.MainActor @preconcurrency final public func showCampassCalibrationView()
}
extension MapstedMapUi.MapstedMapUiInternalViewController {
  @_Concurrency.MainActor @preconcurrency final public func showTagLocation(tag: MapstedCore.MNTag)
}
extension MapstedMapUi.MapstedMapUiInternalViewController {
  @_Concurrency.MainActor @preconcurrency final public func hideSearchBar(hidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency final public func addTag(tagName: Swift.String, tagPos: MapstedCore.MNPosition, category: MapstedMapUi.TagsCategory?, closure: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency final public func addTags(tags: [MapstedCore.MNTag])
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func scrollTo(row: Swift.Int, section: Swift.Int, scrollPosition: UIKit.UITableView.ScrollPosition = .top, animated: Swift.Bool = false)
}
extension MapstedMapUi.MapstedMapUiInternalViewController {
  @_Concurrency.MainActor @preconcurrency final public func showAlerts(alerts: [MapstedAlerts.AlertSearchable])
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMapUi.MapSelectionProtocol {
  @_Concurrency.MainActor @preconcurrency final public func displayOnMap(dataType: MapstedCore.MNDataType?, render: Swift.Bool, propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int, completion: (() -> ())?)
  @_Concurrency.MainActor @preconcurrency final public func makeChooseFrom(searchEntityGroup: MapstedCore.SearchEntity)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMapUi.MNSearchDelegate {
  @_Concurrency.MainActor @preconcurrency final public func selectCategory(category: MapstedCore.CMSCategory)
  @_Concurrency.MainActor @preconcurrency final public func selectAlert(alert: MapstedAlerts.AlertSearchable)
  @_Concurrency.MainActor @preconcurrency final public func selectMapOverlayItem(item: MapstedMap.MapOverlayItem)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedComponentsUI.AlertSelectionDelegate {
  @_Concurrency.MainActor @preconcurrency final public func takeToNearest(fromHomeEntities homeEntities: [MapstedCore.HomeEntity])
  @_Concurrency.MainActor @preconcurrency final public func didSelect(alert: MapstedAlerts.AlertSearchable)
  @_Concurrency.MainActor @preconcurrency final public func didSelect(item: MapstedMap.MapOverlayItem)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedCore.RoutingRequestCallback {
  @_Concurrency.MainActor @preconcurrency @objc final public func onSuccess(routeResponse: MapstedCore.MNRouteResponse)
  @_Concurrency.MainActor @preconcurrency @objc final public func onError(routeResponse: MapstedCore.MNRouteResponse)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMapUi.POIInfoViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency final public func navigateToCampaignEntity(searchEntity: MapstedCore.Campaign)
  @_Concurrency.MainActor @preconcurrency final public func deleteTagFromPOIScreen(tag: MapstedCore.MNTag)
  @_Concurrency.MainActor @preconcurrency final public func editTagNameFromPOIScreen(tag: MapstedCore.MNTag)
  @_Concurrency.MainActor @preconcurrency final public func editTagLocationFromPOIScreen(tag: MapstedCore.MNTag)
  @_Concurrency.MainActor @preconcurrency final public func shareTagFromPOIScreen(tag: MapstedCore.MNTag)
  @_Concurrency.MainActor @preconcurrency final public func addToItineraryPOI(searchEntity: any MapstedCore.Searchable)
  @_Concurrency.MainActor @preconcurrency final public func addOverlayToItinerary(overlay: any MapstedCore.Searchable)
  @_Concurrency.MainActor @preconcurrency final public func navigateToPOI(searchEntity: any MapstedCore.Searchable)
  @_Concurrency.MainActor @preconcurrency final public func showItineraryListPOI()
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMapUi.MapManualLocationChooserDelegate {
  @_Concurrency.MainActor @preconcurrency final public var willChooseLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var cancelledChoosingLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var shownUIToChooseLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var didSelectLocation: MapstedMapUi.RoutingState {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var removedUIToChooseLocation: MapstedMapUi.RoutingState {
    get
  }
}
extension MapstedMapUi.MapstedMapUiInternalViewController : CoreBluetooth.CBCentralManagerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : MapstedMapUi.SearchViewDelegate {
  @_Concurrency.MainActor @preconcurrency final public func didSelectItem(selectedItem: any MapstedCore.ISearchable, searchText: Swift.String)
  @_Concurrency.MainActor @preconcurrency final public func itemSelection(selectedItem: any MapstedCore.Searchable, searchText: Swift.String)
}
extension MapstedMapUi.MapstedMapUiInternalViewController {
  @_Concurrency.MainActor @preconcurrency final public func addDroppedPinDestination(pin: any MapstedCore.Searchable)
}
extension MapstedMapUi.MapstedMapUiInternalViewController {
  @_Concurrency.MainActor @preconcurrency final public func showEventDetailForCampaign(campaignId: Swift.String, propertyId: Swift.Int)
  @_Concurrency.MainActor @preconcurrency final public func showEntityOnMapForCampaign(campaignId: Swift.String, propertyId: Swift.Int)
}
extension MapstedMapUi.MapstedMapUiInternalViewController : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency final public func showWebView(websiteUrl: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc final public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
extension MapstedMapUi.POIInfoViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension MapstedMapUi.POIInfoViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
extension MapstedMapUi.POIInfoViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
public protocol BottomPopupDelegate : AnyObject {
  func bottomPopupViewLoaded()
  func bottomPopupWillAppear()
  func bottomPopupDidAppear()
  func bottomPopupWillDismiss()
  func bottomPopupDidDismiss()
  func bottomPopupDismissInteractionPercentChanged(from oldValue: CoreFoundation.CGFloat, to newValue: CoreFoundation.CGFloat)
}
extension MapstedMapUi.BottomPopupDelegate {
  public func bottomPopupViewLoaded()
  public func bottomPopupWillAppear()
  public func bottomPopupDidAppear()
  public func bottomPopupWillDismiss()
  public func bottomPopupDidDismiss()
  public func bottomPopupDismissInteractionPercentChanged(from oldValue: CoreFoundation.CGFloat, to newValue: CoreFoundation.CGFloat)
}
public protocol BottomPopupAttributesDelegate : AnyObject {
  var popupHeight: CoreFoundation.CGFloat { get }
  var popupTopCornerRadius: CoreFoundation.CGFloat { get }
  var popupPresentDuration: Swift.Double { get }
  var popupDismissDuration: Swift.Double { get }
  var popupShouldDismissInteractivelty: Swift.Bool { get }
  var popupDimmingViewAlpha: CoreFoundation.CGFloat { get }
  var popupShouldBeganDismiss: Swift.Bool { get }
  var popupViewAccessibilityIdentifier: Swift.String { get }
}
public enum BottomPopupConstants {
}
extension MapstedCore.Campaign : MapstedMapUi.MapSelectableEntity {
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var address: Swift.String {
    get
  }
  public var entityNameEnglish: Swift.String {
    get
  }
  public var entityName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var entityPropertyId: Swift.Int {
    get
  }
  public var entityBuildingId: Swift.Int {
    get
  }
  public var entityIdentifier: Swift.Int {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var dataType: MapstedCore.MNDataType {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var timeDescription: Swift.String {
    get
    set
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var website: Swift.String? {
    get
  }
  public func tags() -> [Swift.String]
  public var campaignLabels: [MapstedCore.Labels]? {
    get
  }
  public var campaignFeatures: [MapstedCore.Features]? {
    get
  }
  public var postiveButtonTitle: Swift.String? {
    get
  }
}
public enum CurrentViewHeights {
  case minimal
  case full
  case other
  public static func == (a: MapstedMapUi.CurrentViewHeights, b: MapstedMapUi.CurrentViewHeights) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol POIInfoViewControllerDelegate : AnyObject {
  func moveUp(amount: CoreFoundation.CGFloat, maxHeight: CoreFoundation.CGFloat, actionAtMaximumPoint: (() -> ())?)
  func moveDown(amount: CoreFoundation.CGFloat, minHeight: CoreFoundation.CGFloat, actionAtMinimumPoint: (() -> ())?)
  func selectedEntityVisibleHeight() -> CoreFoundation.CGFloat
  func addToItineraryPOI(searchEntity: any MapstedCore.Searchable)
  func navigateToPOI(searchEntity: any MapstedCore.Searchable)
  func navigateToCampaignEntity(searchEntity: MapstedCore.Campaign)
  func showItineraryListPOI()
  func deleteTagFromPOIScreen(tag: MapstedCore.MNTag)
  func addOverlayToItinerary(overlay: any MapstedCore.Searchable)
  func editTagNameFromPOIScreen(tag: MapstedCore.MNTag)
  func editTagLocationFromPOIScreen(tag: MapstedCore.MNTag)
  func shareTagFromPOIScreen(tag: MapstedCore.MNTag)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class POIInfoViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any MapstedMapUi.POIInfoViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var currentViewHeight: MapstedMapUi.CurrentViewHeights
  @_Concurrency.MainActor @preconcurrency public var locationMarketingDelegate: (any MapstedCore.LocationMarketingCreativeDelegate)!
  @_Concurrency.MainActor @preconcurrency public var isViewToBePushed: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func instantiateViewController(searchEntity: any MapstedMapUi.MapSelectableEntity) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor @preconcurrency public func updateBuildingName(buildingName: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func updateEntityInfo(searchEntity: any MapstedMapUi.MapSelectableEntity)
  @_Concurrency.MainActor @preconcurrency public func getTypeOfInfoBeingShown() -> MapstedMapUi.ModelType?
  @_Concurrency.MainActor @preconcurrency public func getBuildingName(propertyId: Swift.Int?, buildingId: Swift.Int) -> Swift.String
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MapstedMapUi.POIInfoViewController : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
extension MapstedMapUi.POIInfoViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public enum UpdateRouteNameError : Swift.Error {
  case noContext
  case routeNotFound
  case nameSameAsCurrent
  case nameAlreadyExists
  case routeAlreadyExists
  case fetchError(any Swift.Error)
}
public enum SaveRouteNameError : Swift.Error {
  case noContext
  case sameRouteExists
  case sameRouteAndNameExists
  case sameRouteDifferentNameExists
  case differentRouteSameNameExists
  case fetchError(any Swift.Error)
  case FailedToSave
}
public enum Result<Success, Failure> where Failure : Swift.Error {
  case success(Success)
  case failure(Failure)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CoreDataHelper : ObjectiveC.NSObject {
  public static let shared: MapstedMapUi.CoreDataHelper
  @objc deinit
}
extension MapstedMapUi.CoreDataHelper {
  public func addTag(tag: MapstedCore.MNTag, category: MapstedMapUi.TagsCategory? = nil)
  public func addTag(name: Swift.String, propertyId: Swift.Int, buildingId: Swift.Int, floorId: Swift.Int, x: Swift.Double, y: Swift.Double, type: Swift.Int, category: MapstedMapUi.TagsCategory? = nil)
  public func addTags(tags: [MapstedCore.MNTag])
  public func allTags(propertyId: Swift.Int, categoryName: Swift.String? = nil, searchText: Swift.String? = nil) -> [MapstedCore.MNTag]
  public func renameTag(tag: MapstedCore.MNTag, newName: Swift.String, _ category: MapstedMapUi.TagsCategory? = nil)
  public func editTagLocation(tag: MapstedCore.MNTag, newLocation: MapstedCore.MNPosition, completion: (Swift.Bool, MapstedCore.MNTag?) -> Swift.Void)
  public func deleteTag(tag: MapstedCore.MNTag, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @available(*, deprecated)
  public func searchTags(propertyId: Swift.Int, search text: Swift.String) -> [MapstedMapUi.Tag]?
  public func updateRouteName(routeId: Swift.Int64, newName: Swift.String) -> MapstedMapUi.Result<Swift.Bool, MapstedMapUi.UpdateRouteNameError>
  public func deleteRoute(atIndex index: Swift.Int, propertyId: Swift.Int64) -> Swift.Bool
}
extension MapstedMap.MapOverlayItem : MapstedMapUi.MapSelectableEntity {
  public var entityNameEnglish: Swift.String {
    get
  }
  public var entityName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var entityPropertyId: Swift.Int {
    get
  }
  public var entityBuildingId: Swift.Int {
    get
  }
  public var entityIdentifier: Swift.Int {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var dataType: MapstedCore.MNDataType {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var address: Swift.String {
    get
  }
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var supportsFavorites: Swift.Bool {
    get
  }
}
extension MapstedMap.MapOverlayItem : MapstedCore.Searchable {
  @objc dynamic public func floorId() -> Swift.Int
  @objc dynamic public func propertyId() -> Swift.Int
  @objc dynamic public func buildingId() -> Swift.Int
  @objc dynamic public func name() -> Swift.String!
  @objc dynamic public func categoryName() -> Swift.String!
  @objc dynamic public func location() -> MapstedCore.MNMercator!
  @objc dynamic public func categoryTags() -> Swift.Set<Swift.String>!
  @objc dynamic public func categoryUid() -> Swift.String!
  @objc dynamic public func categoryTagUids() -> Swift.Set<Swift.String>!
  @objc dynamic public func locations() -> [MapstedCore.MNMercatorZone]!
  @objc dynamic public func matchWord() -> Swift.String!
  @objc dynamic public func isSearchEntity() -> Swift.Bool
  @objc dynamic public func entityZones() -> [MapstedCore.MNEntityZone]!
  @objc dynamic public func identifier() -> Swift.Int
  @objc dynamic public func idString() -> Swift.String!
}
public enum Translations : Swift.String {
  case eCollapse
  case eNextDestination
  case ePreviousDestination
  case eRouteNavigationTitle
  case eDrag
  case eDragHint
  case eSelectedLocation
  case eSelectLocation
  case eOpen
  case eCloses
  case eClosed
  case eOpens
  case eFloorChangeConfirm
  case eResultsFor
  case eEditTag
  case eRecents
  case eAlerts
  case eTags
  case eBuildings
  case eCategories
  case ePointsOfInterest
  case eMapOverlay
  case eMyTags
  case eShowTagsOnMap
  case eTblBgView
  case eCreateNewTag
  case eCancel
  case eTagTextFieldPlaceholder
  case eSave
  case eWhatLevelAreYouOn
  case ePickFloor
  case eDidYouChangeFloors
  case eViewAlerts
  case eCreated
  case eFindUsOn
  case eNavigateToDesignatedSafeAreas
  case eViewImpactedAreas
  case eDesignatedSafeAreas
  case eAffectedEntities
  case eNoActiveAlertsFound
  case eActiveAlerts
  case eAlertsOnRoute
  case eSelectFloor
  case eSelectFloorYouAreCurrentlyOn
  case eUnexpectedError
  case eUnableToProvideRouting
  case eUnableToRoute
  case eErrorDetermingRoute
  case eInValidStartingPointAlertTitle
  case eInValidStartingPointAlertBody
  case eInValidDestionationAlertTitle
  case eInValidDestionationAlertBody
  case eUnableToRouteDueToAlertsTitle
  case eUnableToRouteDueToAlertsBody
  case eCompassHeader
  case eCompassHeaderSubtitle
  case eCompassDescription
  case eCompassAccuracy
  case eCompassDoneTitle
  case eCreateTag
  case ePOIActionNavigate
  case ePOIActionAddToItinerary
  case ePOIActionDetails
  case ePOIActionShare
  case ePOIActionTag
  case ePOISaveAsTag
  case ePOIActionCall
  case ePOIActionEditName
  case ePOIActionEditLocation
  case ePOIActionDelete
  case ePOISectionTags
  case ePOIInfoTag
  case ePOIInfoSummary
  case ePOIInfoAbout
  case eUnableToSharePOI
  case ePOIViewActiveAlerts
  case ePOIInfoPromotion
  case ePOIInfoLetsGo
  case ePOIInfoExplore
  case eStopSharing
  case eStartSharing
  case eLoaderText
  case eSkipTitleText
  case eRemoveFromFavAccessibilityText
  case eAddToFavAccessibilityText
  case eGoUpTheMapLevelAccessibilityText
  case eGoDownTheMapLevelAccessibilityText
  case eMapOptionsAccessibilityText
  case eSearchAccessibilityText
  case eBackAccessibilityText
  case eCloseAccessibilityText
  case eRemovePointOfDepartureAccessibilityText
  case eRemoveDestinationAccessibilityText
  case eEditTagAccessibilityText
  case eDeleteTagAccessibilityText
  case eShareTag
  case eEditTagName
  case eDeleteTag
  case ePermissionsTitle
  case eFrom
  case eTo
  case eSaveRoute
  case eShareRoute
  case eErrorRouteNameEmpty
  case eCharacterLimit
  case eRouteNamePlaceholderText
  case eRouteNameLabel
  case eRouteNoDataAvailable
  case eViewRouteOnMap
  case eEditRouteName
  case eDeleteRoute
  case eDeleteErrorMessage
  case eDeleteSuccessMessage
  case eSaveRouteSearchPlaceholder
  case eSavedRouteTitle
  case eSaveRouteSavedSuccessfully
  case eSaveRouteDestinationAlreadyExists
  case eSaveRouteContextMissing
  case eSaveRouteDuplicateCheck
  case eSaveRouteSameRouteNameExists
  case eSaveRouteSameRouteDiffName
  case eSaveRouteDiffRouteSameName
  case eSaveRouteSameRouteAlreadyExist
  case eSaveRouteSomethingWentWrong
  case eSaveRouteRouteNameUpdatedSuccessfully
  case eSaveRouteCouldNotAccessContext
  case eSaveNoRouteFound
  case eSaveRouteSameRouteName
  case eSaveRouteNameAlreadyExist
  case eSaveRouteAlreadyExists
  case eSaveRouteErrorOccured
  case eDeleteRouteTitle
  case eDeleteRouteDescription
  case eDeleteButtonText
  case eAudioON
  case eAudioOFF
  case eThen
  case eSteps
  case eTagListEmpty
  case eTagListInfo
  case eCreateYourFirstTag
  case eTagMyCurrentLocation
  case eManuallySetNewTag
  case eTagName
  case eTagLabel
  case eTagSelectCategory
  case eTagCategoryParking
  case eTagCategoryMeetingPoint
  case eTagCategoryAll
  case eTagCategoryNone
  case eTagEditLocation
  case eTagEditTagName
  case eTagDelete
  case eTagDeleteError
  case eTagDeleteSuccess
  case eTagDeleteTitle
  case eTagDeleteDescription
  case eSearchCategoryClearAll
  case eSearchCategoryApply
  case eSearchCategorySubCategory
  case eSeachCategoryKeywords
  case eSearchCategoryResults
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MapstedCore.MNSearchEntity : MapstedMapUi.MapSelectableEntity {
  public var modelDataType: MapstedMapUi.ModelType {
    get
  }
  public var hasAlerts: Swift.Bool {
    get
  }
  public var address: Swift.String {
    get
  }
}
public enum CurrentViewHeight {
  case minimal
  case full
  case other
  public static func == (a: MapstedMapUi.CurrentViewHeight, b: MapstedMapUi.CurrentViewHeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PropertyListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static func className() -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public static func instantiateViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public func selectedPropertyInfo() -> MapstedCore.PropertyInfo?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedMapUi.PropertyListViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension MapstedMapUi.PropertyListViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class ShadowView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var radiusOfCorner: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var shadowOpacity: Swift.Float
  @_Concurrency.MainActor @preconcurrency public var cornersToRound: UIKit.UIRectCorner {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var customFillColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MapSelectionProtocol {
  func displayOnMap(dataType: MapstedCore.MNDataType?, render: Swift.Bool, propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int, completion: (() -> ())?)
  func makeChooseFrom(searchEntityGroup: MapstedCore.SearchEntity)
}
public enum POILinkType {
  case PhoneNumber
  case TimingsInfo
  case Address
  case Website
  case Speaker
  case News
  case None
  public static func == (a: MapstedMapUi.POILinkType, b: MapstedMapUi.POILinkType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ContainerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func addController(controller: UIKit.UIViewController, yOffset: CoreFoundation.CGFloat, isNew: Swift.Bool, callback: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func removeController(controller: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func clearAllControllers()
  @_Concurrency.MainActor @preconcurrency public func addControllerAnimated(controller: UIKit.UIViewController, yOffset: CoreFoundation.CGFloat, isNew: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func activeController() -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency public func controllerOnStack(className: Swift.String) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum FilterMode {
  case fullScreen(categories: [MapstedMapUi.PrimaryCategoryFilter])
  case halfScreen(category: MapstedMapUi.PrimaryCategoryFilter, index: Swift.Int)
}
public enum SEARCH_MODE {
  case History
  case Search_With_Text
  case Category_Filter
  public static func == (a: MapstedMapUi.SEARCH_MODE, b: MapstedMapUi.SEARCH_MODE) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SEARCHING_STATE {
  case NoSearch
  case Searching
  case Searching_with_ExplicitHidingDidYouMean
  case SearchCompleteWithFilters
  case SearchCompleteWithoutFilters
  public static func == (a: MapstedMapUi.SEARCHING_STATE, b: MapstedMapUi.SEARCHING_STATE) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SearchInSection : Swift.String {
  case POI
  case Buildings
  case Categories
  case Tags
  case MapOverlayItems
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SearchViewDelegate : AnyObject {
  func didSelectItem(selectedItem: any MapstedCore.ISearchable, searchText: Swift.String)
  func itemSelection(selectedItem: any MapstedCore.Searchable, searchText: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SearchViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any MapstedMapUi.SearchViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var isPopViewControllerAllowed: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var showMicrophonePopup: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func instantiateViewController(propertyId: Swift.Int, isUsingCurrentLocation: Swift.Bool, pickingDestination: Swift.Bool, selectedItineraryEntities: [any MapstedCore.Searchable], removePreviousDestinations: Swift.Bool = false, delegate: (any MapstedMapUi.SearchViewDelegate)? = nil) -> MapstedMapUi.SearchViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_Concurrency.MainActor @preconcurrency public class MPActivityView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency public var activityIndicator: MapstedMapUi.MNAndroidActivityView!
  @_Concurrency.MainActor @preconcurrency public func setActivityIndicatorView()
  @_Concurrency.MainActor @preconcurrency public func show(duration: CoreFoundation.CFTimeInterval = 3, text: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func dismiss()
  @objc deinit
}
public enum POIActionButtonType : Swift.String {
  case Navigate
  case AddToItinerary
  case Details
  case Share
  case Tag
  case Call
  case EditTagName
  case EditTagLocation
  case DeleteTag
  case None
  case Promotion
  case Custom
  case ViewSteps
  case Go
  case SaveRoute
  case ShareRoute
  case ShareTag
  case SaveAsTag
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol RouteAlertsInfoProtocol : AnyObject {
  var isShowing: Swift.Bool { get }
  func askedToShow()
  func askedToHide()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BottomPopupViewController : UIKit.UIViewController, MapstedMapUi.BottomPopupAttributesDelegate {
  @_Concurrency.MainActor @preconcurrency weak open var popupDelegate: (any MapstedMapUi.BottomPopupDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func updatePopupHeight(to height: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency open var popupHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupTopCornerRadius: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupPresentDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupDismissDuration: Swift.Double {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupShouldDismissInteractivelty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupDimmingViewAlpha: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupShouldBeganDismiss: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var popupViewAccessibilityIdentifier: Swift.String {
    get
  }
  @objc deinit
}
extension MapstedCore.MNSearchEntity {
  public func allCampaigns() -> [MapstedCore.Campaign]
}
@_hasMissingDesignatedInitializers public class MapUICustomParams {
  public static let shared: MapstedMapUi.MapUICustomParams
  public var enableSaveRouteOption: Swift.Bool {
    get
    set
  }
  public var enableFavoriteOption: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public enum RoutingState : Swift.String {
  case None
  case AboutToMakeRouteRequest
  case RequestedNavigation
  case RequestedDirectionsToItinerary
  case ReceivedRoutingInstructions
  case RouteOverviewModeStarted
  case RouteOverviewModeEnded
  case RouteSimulationStarted
  case NavigationStarted
  case NavigationEnded
  case NotifiedNoError
  case NotifiedUnknownUserPositionWayfinding
  case NotifiedUnknownUserPositionPositioning
  case NotifiedOutsideProperty
  case NotifiedMiscellaneousError
  case NotifiedInvalidStartPoint
  case NotifiedInvalidDestination
  case NotifiedAlertBlockingRouting
  case WillChooseStartLocation
  case ShownUIToChooseStartLocation
  case DidSelectStartLocation
  case CancelledChoosingStartLocation
  case RemovedUIToChooseStartLocation
  case WillChooseTagLocation
  case ShownUIToChooseTagLocation
  case DidSelectTagLocation
  case CancelledChoosingTagLocation
  case RemovedUIToChooseTagLocation
  case WillChooseCurrentLocation
  case ShownUIToChooseCurrentLocation
  case DidSelectCurrentLocation
  case CancelledChoosingCurrentLocation
  case RemovedUIToChooseCurrentLocation
  case RoutePreviewModeStarted
  case RoutePreviewModeEnded
  case NotifiedNoRoutingPermission
  case NotifiedImpossibleRoute
  case NotifiedBuildingDataUnavailable
  case NotifiedPropertyDataUnavailable
  case NotifiedDestinationNoNode
  case NotifiedStartNoNode
  case NotifiedInvalidRequest
  case NotifiedInvalidRequestDueToTransitionOptions
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SavedRoutesViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var propertyInfo: MapstedCore.PropertyInfo?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedMapUi.SavedRoutesViewController : MapstedComponentsUI.CustomNavigationBarDelegate {
  @_Concurrency.MainActor @preconcurrency public func textDidChanged(searchText: Swift.String, inSearch: Swift.Bool, isExitSearch: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func backButtonTapped()
  @_Concurrency.MainActor @preconcurrency public func micButtonTapped()
}
extension MapstedMapUi.SavedRoutesViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension MapstedMapUi.SavedRoutesViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
extension UIKit.UIImage {
  public class func gifImageWithData(_ data: Foundation.Data) -> UIKit.UIImage?
  public class func gifImageWithURL(_ gifUrl: Swift.String) -> UIKit.UIImage?
  public class func gifImageWithName(_ name: Swift.String) -> UIKit.UIImage?
}
public protocol MapstedSearchDelegate {
  func startSearch()
  func stopSearch()
}
public enum SearchStyle {
  case TitleAndButton
  case SearchBoxAndButton
  case ButtonOnly
  public static func == (a: MapstedMapUi.SearchStyle, b: MapstedMapUi.SearchStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MapstedSearchView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func setSearchBarDelegate(delegate: any UIKit.UISearchBarDelegate)
  @_Concurrency.MainActor @preconcurrency public func setFontSize(to newSize: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func setSearchButtonTint(to newColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setSearchStyle(to searchStyle: MapstedMapUi.SearchStyle)
  @_Concurrency.MainActor @preconcurrency public func setTitle(to text: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setMapstedSearchDelegate(delegate: any MapstedMapUi.MapstedSearchDelegate)
  @_Concurrency.MainActor @preconcurrency public func setSearchPlaceholder(toString placeholder: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setBackgroundColor(to color: UIKit.UIColor? = nil, alpha: CoreFoundation.CGFloat = 1.0)
  @_Concurrency.MainActor @preconcurrency public func hideSearch()
  @_Concurrency.MainActor @preconcurrency public func showSearch()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoutingOptionsManager {
  public static let shared: MapstedMapUi.RoutingOptionsManager
  public var useStairs: Swift.Bool
  public var useEscalators: Swift.Bool
  public var useElevators: Swift.Bool
  public func isRouteTypeShortest() -> Swift.Bool
  @objc deinit
}
public enum SelectionState {
  case UNSELECTED
  case PARTIALLYSELECTED
  case FULLYSELECTED
  public static func == (a: MapstedMapUi.SelectionState, b: MapstedMapUi.SelectionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BaseFilterType {
  case Category
  case General
  public static func == (a: MapstedMapUi.BaseFilterType, b: MapstedMapUi.BaseFilterType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CategoryKeyword {
}
public struct SecondaryCategoryFilterItem {
}
public struct PrimaryCategoryFilter {
}
public struct ChildCategoryFilter {
}
public struct TagsCategory {
}
@_inheritsConvenienceInitializers @objc(Category) public class Category : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.Category {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.Category>
  @objc @NSManaged dynamic public var categoryId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tags: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.Category {
  @objc(addTagsObject:) @NSManaged dynamic public func addToTags(_ value: MapstedMapUi.Tag)
  @objc(removeTagsObject:) @NSManaged dynamic public func removeFromTags(_ value: MapstedMapUi.Tag)
  @objc(addTags:) @NSManaged dynamic public func addToTags(_ values: Foundation.NSSet)
  @objc(removeTags:) @NSManaged dynamic public func removeFromTags(_ values: Foundation.NSSet)
}
extension MapstedMapUi.Category : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DOMNEntityZone) public class DOMNEntityZone : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.DOMNEntityZone {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.DOMNEntityZone>
  @objc @NSManaged dynamic public var landmarkEntityIds: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mapDataType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nearbyLandmarkName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eSearchEntityZone: MapstedMapUi.DOSearchableEntity? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.DOMNEntityZone : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DOMNMercator) public class DOMNMercator : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.DOMNMercator {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.DOMNMercator>
  @objc @NSManaged dynamic public var x: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var z: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eSearchLocation: MapstedMapUi.DOSearchableEntity? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.DOMNMercator : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DOMNMercatorZone) public class DOMNMercatorZone : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.DOMNMercatorZone {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.DOMNMercatorZone>
  @objc @NSManaged dynamic public var buildingId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var x: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var z: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eSearchLocations: MapstedMapUi.DOSearchableEntity? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.DOMNMercatorZone : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DOSavedRoutes) public class DOSavedRoutes : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.DOSavedRoutes {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.DOSavedRoutes>
  @objc @NSManaged dynamic public var isAccessibilityOptionsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isShortest: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var myCurrentLocation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var routeId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var routeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saveDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var useElevators: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var useEscalators: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var useStairs: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchableEntity: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.DOSavedRoutes {
  @objc(addSearchableEntityObject:) @NSManaged dynamic public func addToSearchableEntity(_ value: MapstedMapUi.DOSearchableEntity)
  @objc(removeSearchableEntityObject:) @NSManaged dynamic public func removeFromSearchableEntity(_ value: MapstedMapUi.DOSearchableEntity)
  @objc(addSearchableEntity:) @NSManaged dynamic public func addToSearchableEntity(_ values: Foundation.NSSet)
  @objc(removeSearchableEntity:) @NSManaged dynamic public func removeFromSearchableEntity(_ values: Foundation.NSSet)
}
extension MapstedMapUi.DOSavedRoutes : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(DOSearchableEntity) public class DOSearchableEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.DOSearchableEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.DOSearchableEntity>
  @objc @NSManaged dynamic public var buildingId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryTags: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryTagUids: ObjectiveC.NSObject? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryUid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSearchEntity: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var matchWordSearchType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var matchWordString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orderIndex: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var doSave: MapstedMapUi.DOSavedRoutes? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityZones: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location: MapstedMapUi.DOMNMercator? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locations: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.DOSearchableEntity {
  @objc(addEntityZonesObject:) @NSManaged dynamic public func addToEntityZones(_ value: MapstedMapUi.DOMNEntityZone)
  @objc(removeEntityZonesObject:) @NSManaged dynamic public func removeFromEntityZones(_ value: MapstedMapUi.DOMNEntityZone)
  @objc(addEntityZones:) @NSManaged dynamic public func addToEntityZones(_ values: Foundation.NSSet)
  @objc(removeEntityZones:) @NSManaged dynamic public func removeFromEntityZones(_ values: Foundation.NSSet)
}
extension MapstedMapUi.DOSearchableEntity {
  @objc(addLocationsObject:) @NSManaged dynamic public func addToLocations(_ value: MapstedMapUi.DOMNMercatorZone)
  @objc(removeLocationsObject:) @NSManaged dynamic public func removeFromLocations(_ value: MapstedMapUi.DOMNMercatorZone)
  @objc(addLocations:) @NSManaged dynamic public func addToLocations(_ values: Foundation.NSSet)
  @objc(removeLocations:) @NSManaged dynamic public func removeFromLocations(_ values: Foundation.NSSet)
}
extension MapstedMapUi.DOSearchableEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(Tag) public class Tag : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedMapUi.Tag {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedMapUi.Tag>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mercatorX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mercatorY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: MapstedMapUi.Category? {
    @objc get
    @objc set
  }
}
extension MapstedMapUi.Tag : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedMapUi.ModelType : Swift.Equatable {}
extension MapstedMapUi.ModelType : Swift.Hashable {}
extension MapstedMapUi.MapState : Swift.Equatable {}
extension MapstedMapUi.MapState : Swift.Hashable {}
extension MapstedMapUi.MapState : Swift.RawRepresentable {}
extension MapstedMapUi.RoutingRequestType : Swift.Equatable {}
extension MapstedMapUi.RoutingRequestType : Swift.Hashable {}
extension MapstedMapUi.RouteInterruptionMode : Swift.Equatable {}
extension MapstedMapUi.RouteInterruptionMode : Swift.Hashable {}
extension MapstedMapUi.RoutingState : Swift.Equatable {}
extension MapstedMapUi.RoutingState : Swift.Hashable {}
extension MapstedMapUi.RoutingState : Swift.RawRepresentable {}
extension MapstedMapUi.CurrentViewHeights : Swift.Equatable {}
extension MapstedMapUi.CurrentViewHeights : Swift.Hashable {}
extension MapstedMapUi.Translations : Swift.Equatable {}
extension MapstedMapUi.Translations : Swift.Hashable {}
extension MapstedMapUi.Translations : Swift.RawRepresentable {}
extension MapstedMapUi.CurrentViewHeight : Swift.Equatable {}
extension MapstedMapUi.CurrentViewHeight : Swift.Hashable {}
extension MapstedMapUi.POILinkType : Swift.Equatable {}
extension MapstedMapUi.POILinkType : Swift.Hashable {}
extension MapstedMapUi.SEARCH_MODE : Swift.Equatable {}
extension MapstedMapUi.SEARCH_MODE : Swift.Hashable {}
extension MapstedMapUi.SEARCHING_STATE : Swift.Equatable {}
extension MapstedMapUi.SEARCHING_STATE : Swift.Hashable {}
extension MapstedMapUi.SearchInSection : Swift.Equatable {}
extension MapstedMapUi.SearchInSection : Swift.Hashable {}
extension MapstedMapUi.SearchInSection : Swift.RawRepresentable {}
extension MapstedMapUi.POIActionButtonType : Swift.Equatable {}
extension MapstedMapUi.POIActionButtonType : Swift.Hashable {}
extension MapstedMapUi.POIActionButtonType : Swift.RawRepresentable {}
extension MapstedMapUi.SearchStyle : Swift.Equatable {}
extension MapstedMapUi.SearchStyle : Swift.Hashable {}
extension MapstedMapUi.SelectionState : Swift.Equatable {}
extension MapstedMapUi.SelectionState : Swift.Hashable {}
extension MapstedMapUi.BaseFilterType : Swift.Equatable {}
extension MapstedMapUi.BaseFilterType : Swift.Hashable {}
